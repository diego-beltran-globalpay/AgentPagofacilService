"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ClientProps = void 0;
exports.ClientProps = [
    {
        propName: "clientEnableAuthenticator",
        defaultValue: false,
        type: "boolean",
        description: "Enable authenticator service for clients",
    },
    {
        propName: "clientTcpListenPort",
        defaultValue: 4567,
        type: "integer",
        description: "TCP Listen Port Number for clients",
    },
    {
        propName: "clientTcpListenIp",
        defaultValue: "127.0.0.1",
        description: "TCP Listen Ip Number for clients",
    },
    {
        propName: "clientTcpMaxConnections",
        type: "integer",
        defaultValue: null,
        description: "Max allowed TCP connections",
    },
    {
        propName: "clientTcpSocketTimeout",
        type: "integer",
        defaultValue: null,
        description: "Client socket timeout on TCP",
    },
    {
        propName: "clientEnableTls",
        type: "boolean",
        defaultValue: false,
        description: "Eanble client TLS conections",
    },
    {
        propName: "clientTlsCertPath",
        defaultValue: "./config/clientCert.crt",
        description: "Path in which is located the cert file to initiate TLS",
    },
    {
        propName: "clientTlsKeyPath",
        defaultValue: "./config/clientKey.key",
        description: "Path in which is located the key file to initiate TLS",
    },
    {
        propName: "clientTlsRequestCert",
        type: "boolean",
        defaultValue: false,
        description: "Make the clients cert file required to start TLS",
    },
    {
        propName: "clientTlsRejectUnauthorized",
        type: "boolean",
        defaultValue: true,
        description: "Reject unauthorized clients or not",
    },
    {
        propName: "clientTlsCaPath",
        defaultValue: "./config/clientCA.cert",
        description: "Path in which is located the CA file to initiate TLS",
    },
    {
        propName: "clientTlsMaxVersion",
        defaultValue: "1_3",
        description: "TLS maximun supported version",
    },
    {
        propName: "clientTlsMinVersion",
        defaultValue: "1_2",
        description: "TLS minimun supported version",
    },
    {
        propName: "clientHttpListenPort",
        defaultValue: 4568,
        type: "integer",
        description: "HTTP Listen Port Number for clients",
    },
    {
        propName: "clientHttpListenIp",
        defaultValue: "127.0.0.1",
        description: "HTTP Listen Ip Number for clients",
    },
    {
        propName: "clientHttpMaxConnections",
        type: "integer",
        defaultValue: null,
        description: "Max allowed HTTP connections",
    },
    {
        propName: "clientHttpSocketTimeout",
        type: "integer",
        defaultValue: null,
        description: "Client socket timeout on HTTP",
    },
    {
        propName: "clientHttpRequestTimeout",
        type: "integer",
        defaultValue: null,
        description: "Client request timeout on HTTP",
    },
    {
        propName: "clientEnableHttps",
        type: "boolean",
        defaultValue: false,
        description: "Eanble client HTTPS conections",
    },
    {
        propName: "clientHttpsCertPath",
        defaultValue: "./clientHttps.cert",
        description: "Path in which is located the cert file to initiate HTTPS",
    },
    {
        propName: "clientHttpsKeyPath",
        defaultValue: "./clientHttps.key",
        description: "Path in which is located the key file to initiate HTTPS",
    },
    {
        propName: "clientHttpsCaPath",
        defaultValue: "./clientCaHttps.cpem",
        description: "Path in which is located the ca store to verify client connections on HTTPS",
    },
    {
        propName: "clientWsListenPort",
        defaultValue: 4568,
        type: "integer",
        description: "Ws Listen Port Number for clients",
    },
    {
        propName: "clientWsListenIp",
        defaultValue: "127.0.0.1",
        description: "Ws Listen Ip Number for clients",
    },
    {
        propName: "clientWsMaxConnections",
        type: "integer",
        defaultValue: null,
        description: "Max allowed Ws connections",
    },
    {
        propName: "clientWsSocketTimeout",
        type: "integer",
        defaultValue: null,
        description: "Client socket timeout on Ws",
    },
    {
        propName: "clientWsRequestTimeout",
        type: "integer",
        defaultValue: null,
        description: "Client request timeout on Ws",
    },
    {
        propName: "clientEnableWss",
        type: "boolean",
        defaultValue: false,
        description: "Eanble client Wss conections",
    },
    {
        propName: "clientWssCertPath",
        defaultValue: "./clientWss.cert",
        description: "Path in which is located the cert file to initiate Wss",
    },
    {
        propName: "clientWssKeyPath",
        defaultValue: "./clientWss.key",
        description: "Path in which is located the key file to initiate Wss",
    },
    {
        propName: "clientWssCaPath",
        defaultValue: "./clientCaWss.cpem",
        description: "Path in which is located the ca store to verify client connections on Wss",
    },
    {
        propName: "clientKvPairSeparator",
        defaultValue: "|",
        description: "Character used to split key/value pairs on KV codec",
    },
    {
        propName: "clientKvKeyValueSeparator",
        defaultValue: "=",
        description: "Character used to split key and value on KV codec",
    },
    {
        propName: "clientKvIsStartSeparator",
        type: "boolean",
        defaultValue: false,
        description: "KV message start with a pair separator character",
    },
    {
        propName: "clientKvIsEndSeparator",
        type: "boolean",
        defaultValue: false,
        description: "KV message ends with a pair separator character",
    },
    {
        propName: "clientListenGroup",
        type: "string",
        defaultValue: undefined,
        description: "Relationship between address enpoint and their group belonging (group ID)",
    },
    {
        propName: "clientPacketLengthIncluded",
        type: "boolean",
        defaultValue: false,
        description: "Indicates if the packet header length is included in the length value or not",
    },
    {
        propName: "clientPacketLengthType",
        defaultValue: "uintbe",
        description: "Type of packet header used by clients",
    },
    {
        propName: "clientPacketLengthFormat",
        defaultValue: "dec",
        description: "Format of packet header used by clients. Opts: dec or hex",
    },
    {
        propName: "clientPacketLengthOffset",
        type: "integer",
        defaultValue: 0,
        description: "Amount of bytes between header and packet length",
    },
    {
        propName: "clientPacketLengthFirst",
        type: "boolean",
        defaultValue: false,
        description: "Indicates if the packet length will be received first of anything else",
    },
    {
        propName: "clientPacketLengthLen",
        type: "integer",
        defaultValue: 2,
        description: "Amount of bytes the packet length use",
    },
    {
        propName: "clientHeader",
        type: "string",
        defaultValue: "",
        description: "Header used by clients. Format hex",
    },
    {
        propName: "clientHeaderLengthIncluded",
        type: "boolean",
        defaultValue: false,
        description: "Indicates if the header is included in the packet length or not",
    },
    {
        propName: "clientTrailer",
        type: "string",
        defaultValue: "",
        description: "Trailer used by clients. Format hex",
    },
    {
        propName: "clientTrailerLengthIncluded",
        type: "boolean",
        defaultValue: false,
        description: "Indicates if the trailer is included in the packet length or not",
    },
    {
        propName: "clientCheckSumType",
        defaultValue: "none",
        description: "Checksum type applied to the messages",
    },
    {
        propName: "clientTrailerBeforeCksum",
        type: "boolean",
        defaultValue: false,
        description: "Indicates if the trailer is located before the checksum value within message",
    },
    {
        propName: "clientAck",
        type: "string",
        defaultValue: "",
        description: "ACK value send to clients. Format hex",
    },
    {
        propName: "clientNack",
        type: "string",
        defaultValue: "",
        description: "NACK value send to clients. Format hex",
    },
    {
        propName: "clientEot",
        type: "string",
        defaultValue: "",
        description: "EOT value send to clients. Format hex",
    },
    {
        propName: "clientEnq",
        type: "string",
        defaultValue: "",
        description: "ENQ value to be received from clients. Format hex",
    },
    {
        propName: "clientEscapeChar",
        type: "string",
        defaultValue: "",
        description: "Char to escape and unescape message rcv. Format hex",
    },
    {
        propName: "clientDataType",
        type: "string",
        defaultValue: "json",
        description: "Type of the data we will receive.",
    },
    {
        propName: "clientIsoConfigPath",
        type: "string",
        defaultValue: "",
        description: "CFG file to configure iso wrapper",
    },
    {
        propName: "clientCrcPoly",
        type: "integer",
        defaultValue: undefined,
        description: "Poly value to use on crc calculation",
    },
    {
        propName: "clientCrcXorIn",
        type: "integer",
        defaultValue: undefined,
        description: "XorIn value to use on crc calculation",
    },
    {
        propName: "clientCrcXorOut",
        type: "integer",
        defaultValue: undefined,
        description: "XorOut value to use on crc calculation",
    },
    {
        propName: "clientCrcReflect",
        type: "boolean",
        defaultValue: false,
        description: "Use reflect process on crc calculation",
    },
    {
        propName: "clientCheckSumLengthIncluded",
        type: "boolean",
        defaultValue: false,
        description: "Use reflect process on crc calculation",
    },
    {
        propName: "clientIsHeaderIncludedInCkSum",
        type: "boolean",
        defaultValue: false,
        description: "",
    },
    {
        propName: "clientIsTrailerIncludedInCkSum",
        type: "boolean",
        defaultValue: false,
        description: "",
    },
    // Client TCP Caller params
    {
        propName: "clientTcpCallerIp",
        type: "string[]",
        defaultValue: "127.0.0.1",
        description: "List of ip for clients whose connection is initiated by us, separated by -",
    },
    {
        propName: "clientTcpCallerPort",
        type: "integer[]",
        defaultValue: "2254",
        description: "List of ports for clients whose connection is initiated by us, separated by -",
    },
    {
        propName: "clientTcpCallerGroups",
        type: "string[]",
        defaultValue: undefined,
        description: "A way to group clients into pools. Each value must be separated by - . We need a value for each client caller ip",
    },
    {
        propName: "clientTcpCallerNames",
        type: "string[]",
        defaultValue: undefined,
        description: "A way to name each client. Each value must be separated by - . We need a value for each client caller ip",
    },
    {
        propName: "clientTcpCallerTimeout",
        type: "integer[]",
        defaultValue: "60000",
        description: "List of timeouts for each client whose connection is initiated by us, separated by -",
    },
    {
        propName: "clientTcpCallerReconnectTime",
        type: "integer[]",
        defaultValue: "4000",
        description: "List of reconnection time for each client whose connection is initiated by us, separated by -",
    },
    {
        propName: "clientTcpCallerHeader",
        type: "string[]",
        defaultValue: "",
        description: "List of header value for each client whose connection is initiated by us, separated by -",
    },
    {
        propName: "clientTcpCallerHeaderLengthIncluded",
        type: "boolean[]",
        defaultValue: "false",
        description: "List of flags that indicate whether the header length is included or not in message length, separated by -",
    },
    {
        propName: "clientTcpCallerTrailer",
        type: "string[]",
        defaultValue: "",
        description: "List of trailer value for each client whose connection is initiated by us, separated by -",
    },
    {
        propName: "clientTcpCallerTrailerLengthIncluded",
        type: "boolean[]",
        defaultValue: "false",
        description: "List of flags that indicate whether the trailer length is included or not in message length, separated by -",
    },
    {
        propName: "clientTcpCallerAck",
        type: "string[]",
        defaultValue: "",
        description: "List of ACK value for each client whose connection is initiated by us, separated by -",
    },
    {
        propName: "clientTcpCallerNack",
        type: "string[]",
        defaultValue: "",
        description: "List of NACK value for each client whose connection is initiated by us, separated by -",
    },
    {
        propName: "clientTcpCallerEot",
        type: "string[]",
        defaultValue: "",
        description: "List of EOT value for each client whose connection is initiated by us, separated by -",
    },
    {
        propName: "clientTcpCallerEnq",
        type: "string[]",
        defaultValue: "",
        description: "List of ENQ value for each client whose connection is initiated by us, separated by -",
    },
    {
        propName: "clientTcpCallerDataType",
        type: "string[]",
        defaultValue: "json",
        description: "List of expected data type for each client whose connection is initiated by us, separated by -",
    },
    {
        propName: "clientTcpCallerIsoConfigPath",
        type: "string[]",
        defaultValue: "",
        description: "List of file path to configure iso wrapper for each client whose connection is initiated by us, separated by -",
    },
    {
        propName: "clientTcpCallerCrcPoly",
        type: "integer[]",
        defaultValue: undefined,
        description: "List of poly value to use on crc calculation for each client whose connection is initiated by us, separated by -",
    },
    {
        propName: "clientTcpCallerCrcXorIn",
        type: "integer[]",
        defaultValue: undefined,
        description: "List of xorIn value to use on crc calculation for each client whose connection is initiated by us, separated by -",
    },
    {
        propName: "clientTcpCallerCrcXorOut",
        type: "integer[]",
        defaultValue: undefined,
        description: "List of XorOut value to use on crc calculation for each client whose connection is initiated by us, separated by -",
    },
    {
        propName: "clientTcpCallerCrcReflect",
        type: "boolean[]",
        defaultValue: undefined,
        description: "List of flags that indicate the use of reflect process on crc calculation for each client whose connection is initiated by us, separated by -",
    },
    {
        propName: "clientTcpCallerPacketLengthIncluded",
        type: "boolean[]",
        defaultValue: "false",
        description: "List of flags that indicate whether the packet length is included or not in message length, separated by -",
    },
    {
        propName: "clientTcpCallerPacketLengthType",
        type: "string[]",
        defaultValue: "uintbe",
        description: "List of length types for each client whose connection is initiated by us, separated by -",
    },
    {
        propName: "clientTcpCallerPacketLengthFormat",
        type: "string[]",
        defaultValue: "dec",
        description: "List of length formats for each client whose connection is initiated by us, separated by -",
    },
    {
        propName: "clientTcpCallerPacketLengthLen",
        type: "integer[]",
        defaultValue: "2",
        description: "List of packetLen lengths used for each client whose connection is initiated by us, separated by -",
    },
    {
        propName: "clientTcpCallerPacketLengthOffset",
        type: "integer[]",
        defaultValue: "0",
        description: "List of offset value left between header and packet length for each client whose connection is initiated by us, separated by -",
    },
    {
        propName: "clientTcpCallerPacketLengthFirst",
        type: "boolean[]",
        defaultValue: "false",
        description: "List of flags that indicate whether the packet length will be received before anythnig else for each client whose connection is initiated by us, separated by -",
    },
    {
        propName: "clientTcpCallerEnableTls",
        type: "boolean[]",
        defaultValue: "false",
        description: "List of flags that indicate whether connection with each client use TLS or not, separated by -",
    },
    {
        propName: "clientTcpCallerEscapeChar",
        type: "string[]",
        defaultValue: "",
        description: "List of escape chars used for each client whose connection is initiated by us, separated by -",
    },
    {
        propName: "clientTcpCallerCheckSumType",
        type: "string[]",
        defaultValue: "none",
        description: "List of checksum types used for each client whose connection is initiated by us, separated by -",
    },
    {
        propName: "clientTcpCallerTrailerBeforeCksum",
        type: "boolean[]",
        defaultValue: "false",
        description: "List of flags that indicate whether the trailer is set before the cksum value in msgs for each client whose connection is initiated by us, separated by -",
    },
    {
        propName: "clientTcpCallerCheckSumLengthIncluded",
        type: "boolean[]",
        defaultValue: "false",
        description: "List of flags that indicate whether the check sum is included or not in the packet length for each client whose connection is initiated by us, separated by -",
    },
    {
        propName: "clientTcpCallerIsHeaderIncludedInCkSum",
        type: "boolean[]",
        defaultValue: "false",
        description: "List of flags that indicate whether the header is included or not in cksum process for each client whose connection is initiated by us, separated by -",
    },
    {
        propName: "clientTcpCallerIsTrailerIncludedInCkSum",
        type: "boolean[]",
        defaultValue: "false",
        description: "List of flags that indicate whether the trailer is included or not in cksum process for each client whose connection is initiated by us, separated by -",
    },
    // Client Http caller params
    {
        propName: "clientHttpCallerRejectUnauthorized",
        type: "boolean[]",
        defaultValue: "true",
        description: "List of flags that indicate whether connection with each HTTP client must verify the server cert when use TLS, separated by -",
    },
    {
        propName: "clientHttpCallerIp",
        type: "string[]",
        defaultValue: "127.0.0.1",
        description: "List of ip for HTTP clients whose connection is initiated by us, separated by -",
    },
    {
        propName: "clientHttpCallerPort",
        type: "integer[]",
        defaultValue: "2255",
        description: "List of port for HTTP clients whose connection is initiated by us, separated by -",
    },
    {
        propName: "clientHttpCallerPath",
        type: "string[]",
        defaultValue: "",
        description: "List of path for HTTP clients whose connection is initiated by us, separated by -",
    },
    {
        propName: "clientHttpCallerGroups",
        type: "string[]",
        defaultValue: undefined,
        description: "A way to group HTTP clients into pools. Each value must be separated by - . We need a value for each client caller ip",
    },
    {
        propName: "clientHttpCallerNames",
        type: "string[]",
        defaultValue: undefined,
        description: "A way to name each HTTP clients. Each value must be separated by - . We need a value for each client caller ip",
    },
    {
        propName: "clientHttpCallerTimeout",
        type: "integer[]",
        defaultValue: "60000",
        description: "List of timeouts for each HTTP client whose connection is initiated by us, separated by -",
    },
    {
        propName: "clientHttpCallerEnableHttps",
        type: "boolean[]",
        defaultValue: "false",
        description: "List of flags that indicate whether connection with each HTTP client use TLS or not, separated by -",
    },
    {
        propName: "clientHttpCallerAuthKey",
        type: "string[]",
        defaultValue: undefined,
        description: "List of fixed auth keys (tokens) use for each HTTP client, if they require one, separated by -",
    },
    {
        propName: "clientHttpCallerAuthRuleName",
        type: "string",
        defaultValue: "ClientLogin",
        description: "Name of the rule that will be used to generate the authentication msg (login) for HTTP clients (client endpoints)",
    },
    {
        propName: "clientHttpCallerReloadAuth",
        type: "integer",
        defaultValue: 60000,
        description: "Indicate the time interval to execute the authentication process (login)",
    },
    // Client control msgs
    {
        propName: "clientTimerEchoTest",
        type: "integer",
        defaultValue: 60000,
        description: "Indicate the time interval to execute the control messages process for clients",
    },
    {
        propName: "clientEchoTransformationRuleName",
        type: "string",
        defaultValue: "false",
        description: "Name of the rule that will be used to generate the echo test msgs for clients",
    },
    {
        propName: "clientLogonTransformationRuleName",
        type: "string",
        defaultValue: "false",
        description: "Name of the rule that will be used to generate the logon msgs for clients",
    },
    //Serial caller params
    {
        propName: "clientSerialCallerPort",
        type: "string[]",
        defaultValue: "COM9",
        description: "",
    },
    {
        propName: "clientSerialCallerBaudRate",
        type: "integer[]",
        defaultValue: "115200",
        description: "",
    },
    {
        propName: "clientSerialCallerDataBits",
        type: "integer[]",
        defaultValue: "8",
        description: "",
    },
    {
        propName: "clientSerialCallerStopBits",
        type: "integer[]",
        defaultValue: "1",
        description: "",
    },
    {
        propName: "clientSerialCallerParity",
        type: "string[]",
        defaultValue: "none",
        description: "",
    },
    {
        propName: "clientSerialCallerLock",
        type: "boolean[]",
        defaultValue: "false",
        description: "",
    },
    {
        propName: "clientSerialCallerXoff",
        type: "boolean[]",
        defaultValue: "false",
        description: "",
    },
    {
        propName: "clientSerialCallerXon",
        type: "boolean[]",
        defaultValue: "false",
        description: "",
    },
    {
        propName: "clientSerialCallerGroups",
        type: "string[]",
        defaultValue: undefined,
        description: "A way to group clients into pools. Each value must be separated by - . We need a value for each client caller ip",
    },
    {
        propName: "clientSerialCallerNames",
        type: "string[]",
        defaultValue: undefined,
        description: "A way to name each client. Each value must be separated by - . We need a value for each client caller ip",
    },
    {
        propName: "clientSerialCallerTimeout",
        type: "integer[]",
        defaultValue: "60000",
        description: "List of timeouts for each client whose connection is initiated by us, separated by -",
    },
    {
        propName: "clientSerialCallerReconnectTime",
        type: "integer[]",
        defaultValue: "4000",
        description: "List of reconnection time for each client whose connection is initiated by us, separated by -",
    },
    {
        propName: "clientSerialCallerHeader",
        type: "string[]",
        defaultValue: "",
        description: "List of header value for each client whose connection is initiated by us, separated by -",
    },
    {
        propName: "clientSerialCallerHeaderLengthIncluded",
        type: "boolean[]",
        defaultValue: "false",
        description: "List of flags that indicate whether the header length is included or not in message length, separated by -",
    },
    {
        propName: "clientSerialCallerTrailer",
        type: "string[]",
        defaultValue: "",
        description: "List of trailer value for each client whose connection is initiated by us, separated by -",
    },
    {
        propName: "clientSerialCallerTrailerLengthIncluded",
        type: "boolean[]",
        defaultValue: "false",
        description: "List of flags that indicate whether the trailer length is included or not in message length, separated by -",
    },
    {
        propName: "clientSerialCallerAck",
        type: "string[]",
        defaultValue: "",
        description: "List of ACK value for each client whose connection is initiated by us, separated by -",
    },
    {
        propName: "clientSerialCallerNack",
        type: "string[]",
        defaultValue: "",
        description: "List of NACK value for each client whose connection is initiated by us, separated by -",
    },
    {
        propName: "clientSerialCallerEot",
        type: "string[]",
        defaultValue: "",
        description: "List of EOT value for each client whose connection is initiated by us, separated by -",
    },
    {
        propName: "clientSerialCallerEnq",
        type: "string[]",
        defaultValue: "",
        description: "List of ENQ value for each client whose connection is initiated by us, separated by -",
    },
    {
        propName: "clientSerialCallerDataType",
        type: "string[]",
        defaultValue: "json",
        description: "List of expected data type for each client whose connection is initiated by us, separated by -",
    },
    {
        propName: "clientSerialCallerIsoConfigPath",
        type: "string[]",
        defaultValue: "",
        description: "List of file path to configure iso wrapper for each client whose connection is initiated by us, separated by -",
    },
    {
        propName: "clientSerialCallerCrcPoly",
        type: "integer[]",
        defaultValue: undefined,
        description: "List of poly value to use on crc calculation for each client whose connection is initiated by us, separated by -",
    },
    {
        propName: "clientSerialCallerCrcXorIn",
        type: "integer[]",
        defaultValue: undefined,
        description: "List of xorIn value to use on crc calculation for each client whose connection is initiated by us, separated by -",
    },
    {
        propName: "clientSerialCallerCrcXorOut",
        type: "integer[]",
        defaultValue: undefined,
        description: "List of XorOut value to use on crc calculation for each client whose connection is initiated by us, separated by -",
    },
    {
        propName: "clientSerialCallerCrcReflect",
        type: "boolean[]",
        defaultValue: undefined,
        description: "List of flags that indicate the use of reflect process on crc calculation for each client whose connection is initiated by us, separated by -",
    },
    {
        propName: "clientSerialCallerPacketLengthIncluded",
        type: "boolean[]",
        defaultValue: "false",
        description: "List of flags that indicate whether the packet length is included or not in message length, separated by -",
    },
    {
        propName: "clientSerialCallerPacketLengthType",
        type: "string[]",
        defaultValue: "uintbe",
        description: "List of length types for each client whose connection is initiated by us, separated by -",
    },
    {
        propName: "clientSerialCallerPacketLengthFormat",
        type: "string[]",
        defaultValue: "dec",
        description: "List of length formats for each client whose connection is initiated by us, separated by -",
    },
    {
        propName: "clientSerialCallerPacketLengthLen",
        type: "integer[]",
        defaultValue: "2",
        description: "List of packetLen lengths used for each client whose connection is initiated by us, separated by -",
    },
    {
        propName: "clientSerialCallerPacketLengthOffset",
        type: "integer[]",
        defaultValue: "0",
        description: "List of offset value left between header and packet length for each client whose connection is initiated by us, separated by -",
    },
    {
        propName: "clientSerialCallerPacketLengthFirst",
        type: "boolean[]",
        defaultValue: "false",
        description: "List of flags that indicate whether the packet length will be received before anythnig else for each client whose connection is initiated by us, separated by -",
    },
    {
        propName: "clientSerialCallerEscapeChar",
        type: "string[]",
        defaultValue: "",
        description: "List of escape chars used for each client whose connection is initiated by us, separated by -",
    },
    {
        propName: "clientSerialCallerCheckSumType",
        type: "string[]",
        defaultValue: "none",
        description: "List of checksum types used for each client whose connection is initiated by us, separated by -",
    },
    {
        propName: "clientSerialCallerTrailerBeforeCksum",
        type: "boolean[]",
        defaultValue: "false",
        description: "List of flags that indicate whether the trailer is set before the cksum value in msgs for each client whose connection is initiated by us, separated by -",
    },
    {
        propName: "clientSerialCallerCheckSumLengthIncluded",
        type: "boolean[]",
        defaultValue: "false",
        description: "List of flags that indicate whether the check sum is included or not in the packet length for each client whose connection is initiated by us, separated by -",
    },
    {
        propName: "clientSerialCallerIsHeaderIncludedInCkSum",
        type: "boolean[]",
        defaultValue: "false",
        description: "List of flags that indicate whether the header is included or not in cksum process for each client whose connection is initiated by us, separated by -",
    },
    {
        propName: "clientSerialCallerIsTrailerIncludedInCkSum",
        type: "boolean[]",
        defaultValue: "false",
        description: "List of flags that indicate whether the trailer is included or not in cksum process for each client whose connection is initiated by us, separated by -",
    },
];
