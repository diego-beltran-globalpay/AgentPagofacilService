"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isKernelPropsITF = exports.KernelPropsITFSchema = exports.ajv = void 0;
/* tslint:disable */
// generated by typescript-json-validator
const util_1 = require("util");
const Ajv = require("ajv");
exports.ajv = new Ajv({ allErrors: true, coerceTypes: false, format: "fast", nullable: true, unicode: true, uniqueItems: true, useDefaults: true });
exports.ajv.addMetaSchema(require("ajv/lib/refs/json-schema-draft-06.json"));
exports.KernelPropsITFSchema = {
    $schema: "http://json-schema.org/draft-07/schema#",
    defaultProperties: [],
    definitions: {
        MsgKeyTypes: {
            enum: ["cleaned", "iso", "transparent"],
            type: "string",
        },
        PoolModes: {
            enum: ["balance", "failOver"],
            type: "string",
        },
    },
    properties: {
        applyElementMapping: {
            type: "boolean",
        },
        applyLevelTransformation: {
            type: "boolean",
        },
        clientAltContextFieldsList: {
            type: "string",
        },
        clientAltContextKeyType: {
            $ref: "#/definitions/MsgKeyTypes",
        },
        clientContextFieldsList: {
            type: "string",
        },
        clientContextKeyType: {
            $ref: "#/definitions/MsgKeyTypes",
        },
        clientPoolMethod: {
            $ref: "#/definitions/PoolModes",
        },
        clientSwitchFilePath: {
            type: "string",
        },
        clientSwitchReloadInterval: {
            type: "number",
        },
        enableClientHttpCaller: {
            type: "boolean",
        },
        enableClientHttpListener: {
            type: "boolean",
        },
        enableClientSerialCaller: {
            type: "boolean",
        },
        enableClientTcpCaller: {
            type: "boolean",
        },
        enableClientTcpListener: {
            type: "boolean",
        },
        enableClientWsListener: {
            type: "boolean",
        },
        enableTargetHttpCaller: {
            type: "boolean",
        },
        enableTargetHttpListener: {
            type: "boolean",
        },
        enableTargetSerialCaller: {
            type: "boolean",
        },
        enableTargetTcpCaller: {
            type: "boolean",
        },
        enableTargetTcpListener: {
            type: "boolean",
        },
        enableTargetWsListener: {
            type: "boolean",
        },
        loadAxiosModule: {
            type: "boolean",
        },
        loadDbModule: {
            type: "boolean",
        },
        loadIso8583Module: {
            type: "boolean",
        },
        loadSerialPortModule: {
            type: "boolean",
        },
        loadWasiModule: {
            type: "boolean",
        },
        targetAltContextFieldsList: {
            type: "string",
        },
        targetAltContextKeyType: {
            $ref: "#/definitions/MsgKeyTypes",
        },
        targetContextFieldsList: {
            type: "string",
        },
        targetContextKeyType: {
            $ref: "#/definitions/MsgKeyTypes",
        },
        targetPoolMethod: {
            $ref: "#/definitions/PoolModes",
        },
        targetSwitchFilePath: {
            type: "string",
        },
        targetSwitchReloadInterval: {
            type: "number",
        },
        useSecureStore: {
            type: "boolean",
        },
    },
    required: [
        "applyElementMapping",
        "applyLevelTransformation",
        "clientAltContextFieldsList",
        "clientAltContextKeyType",
        "clientContextFieldsList",
        "clientContextKeyType",
        "clientPoolMethod",
        "clientSwitchFilePath",
        "clientSwitchReloadInterval",
        "enableClientHttpCaller",
        "enableClientHttpListener",
        "enableClientSerialCaller",
        "enableClientTcpCaller",
        "enableClientTcpListener",
        "enableClientWsListener",
        "enableTargetHttpCaller",
        "enableTargetHttpListener",
        "enableTargetSerialCaller",
        "enableTargetTcpCaller",
        "enableTargetTcpListener",
        "enableTargetWsListener",
        "loadAxiosModule",
        "loadDbModule",
        "loadIso8583Module",
        "loadSerialPortModule",
        "loadWasiModule",
        "targetAltContextFieldsList",
        "targetAltContextKeyType",
        "targetContextFieldsList",
        "targetContextKeyType",
        "targetPoolMethod",
        "targetSwitchFilePath",
        "targetSwitchReloadInterval",
        "useSecureStore",
    ],
    type: "object",
};
exports.isKernelPropsITF = exports.ajv.compile(exports.KernelPropsITFSchema);
function validate(value) {
    if (exports.isKernelPropsITF(value)) {
        return value;
    }
    else {
        throw new Error(exports.ajv.errorsText(exports.isKernelPropsITF.errors.filter((e) => e.keyword !== "if"), { dataVar: "KernelPropsITF" }) +
            "\n\n" +
            util_1.inspect(value));
    }
}
exports.default = validate;
