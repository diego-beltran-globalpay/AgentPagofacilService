"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TargetProps = void 0;
exports.TargetProps = [
    {
        propName: "targetEnableAuthenticator",
        defaultValue: false,
        type: "boolean",
        description: "Enable authenticator service for targets",
    },
    {
        propName: "targetTcpListenPort",
        defaultValue: 4577,
        type: "integer",
        description: "TCP Listen Port Number for targets",
    },
    {
        propName: "targetTcpListenIp",
        defaultValue: "127.0.0.1",
        description: "TCP Listen Ip Number for targets",
    },
    {
        propName: "targetEnableTls",
        type: "boolean",
        defaultValue: false,
        description: "Eanble target TLS conections",
    },
    {
        propName: "targetTcpMaxConnections",
        type: "integer",
        defaultValue: null,
        description: "Max allowed TCP connections",
    },
    {
        propName: "targetTcpSocketTimeout",
        type: "integer",
        defaultValue: null,
        description: "Client socket timeout on TCP",
    },
    {
        propName: "targetTlsCertPath",
        defaultValue: "./config/targetCert.crt",
        description: "Path in which is located the cert file to initiate TLS",
    },
    {
        propName: "targetTlsKeyPath",
        defaultValue: "./config/targetKey.key",
        description: "Path in which is located the key file to initiate TLS",
    },
    {
        propName: "targetTlsRequestCert",
        type: "boolean",
        defaultValue: false,
        description: "Make the targets cert file required to start TLS",
    },
    {
        propName: "targetTlsRejectUnauthorized",
        type: "boolean",
        defaultValue: true,
        description: "Reject unauthorized targets or not",
    },
    {
        propName: "targetTlsCaPath",
        defaultValue: "./config/targetCA.cert",
        description: "Path in which is located the CA file to initiate TLS",
    },
    {
        propName: "targetTlsMaxVersion",
        defaultValue: "1_3",
        description: "TLS maximun supported version",
    },
    {
        propName: "targetTlsMinVersion",
        defaultValue: "1_2",
        description: "TLS minimun supported version",
    },
    {
        propName: "targetHttpListenPort",
        defaultValue: 4578,
        type: "integer",
        description: "HTTP Listen Port Number for targets",
    },
    {
        propName: "targetHttpListenIp",
        defaultValue: "127.0.0.1",
        description: "HTTP Listen Ip Number for targets",
    },
    {
        propName: "targetHttpMaxConnections",
        type: "integer",
        defaultValue: null,
        description: "Max allowed HTTP connections",
    },
    {
        propName: "targetHttpSocketTimeout",
        type: "integer",
        defaultValue: null,
        description: "Target socket timeout on HTTP",
    },
    {
        propName: "targetHttpRequestTimeout",
        type: "integer",
        defaultValue: null,
        description: "Target request timeout on HTTP",
    },
    {
        propName: "targetEnableHttps",
        type: "boolean",
        defaultValue: false,
        description: "Eanble target HTTPS conections",
    },
    {
        propName: "targetHttpsCertPath",
        defaultValue: "./targetHttps.cert",
        description: "Path in which is located the cert file to initiate HTTPS",
    },
    {
        propName: "targetHttpsKeyPath",
        defaultValue: "./targetHttps.key",
        description: "Path in which is located the key file to initiate HTTPS",
    },
    {
        propName: "targetHttpsCaPath",
        defaultValue: "./targetCaHttps.cpem",
        description: "Path in which is located the ca store to verify target connections on HTTPS",
    },
    {
        propName: "targetWsListenPort",
        defaultValue: 4578,
        type: "integer",
        description: "Ws Listen Port Number for targets",
    },
    {
        propName: "targetWsListenIp",
        defaultValue: "127.0.0.1",
        description: "Ws Listen Ip Number for targets",
    },
    {
        propName: "targetWsMaxConnections",
        type: "integer",
        defaultValue: null,
        description: "Max allowed Ws connections",
    },
    {
        propName: "targetWsSocketTimeout",
        type: "integer",
        defaultValue: null,
        description: "Target socket timeout on Ws",
    },
    {
        propName: "targetWsRequestTimeout",
        type: "integer",
        defaultValue: null,
        description: "Target request timeout on Ws",
    },
    {
        propName: "targetEnableWss",
        type: "boolean",
        defaultValue: false,
        description: "Eanble target Wss conections",
    },
    {
        propName: "targetWssCertPath",
        defaultValue: "./targetWss.cert",
        description: "Path in which is located the cert file to initiate Wss",
    },
    {
        propName: "targetWssKeyPath",
        defaultValue: "./targetWss.key",
        description: "Path in which is located the key file to initiate Wss",
    },
    {
        propName: "targetWssCaPath",
        defaultValue: "./targetCaWss.cpem",
        description: "Path in which is located the ca store to verify target connections on Wss",
    },
    {
        propName: "targetKvPairSeparator",
        defaultValue: "|",
        description: "Character used to split key/value pairs on KV codec",
    },
    {
        propName: "targetKvKeyValueSeparator",
        defaultValue: "=",
        description: "Character used to split key and value on KV codec",
    },
    {
        propName: "targetKvIsStartSeparator",
        type: "boolean",
        defaultValue: false,
        description: "KV message start with a pair separator character",
    },
    {
        propName: "targetKvIsEndSeparator",
        type: "boolean",
        defaultValue: false,
        description: "KV message ends with a pair separator character",
    },
    {
        propName: "targetListenGroup",
        type: "string",
        defaultValue: undefined,
        description: "Relationship between address enpoint and their group belonging (group ID)",
    },
    {
        propName: "targetPacketLengthIncluded",
        type: "boolean",
        defaultValue: false,
        description: "Indicates if the packet header length is included in the length value or not",
    },
    {
        propName: "targetPacketLengthType",
        defaultValue: "uintbe",
        description: "Type of packet header used by targets",
    },
    {
        propName: "targetPacketLengthFormat",
        defaultValue: "dec",
        description: "Format of packet header used by targets. Opts: dec or hex",
    },
    {
        propName: "targetPacketLengthOffset",
        type: "integer",
        defaultValue: 0,
        description: "Amount of bytes between header and packet length",
    },
    {
        propName: "targetPacketLengthFirst",
        type: "boolean",
        defaultValue: "false",
        description: "Indicate whether the packet length will be received before anythnig else",
    },
    {
        propName: "targetPacketLengthLen",
        type: "integer",
        defaultValue: 2,
        description: "Amount of bytes the packet length use",
    },
    {
        propName: "targetHeader",
        type: "string",
        defaultValue: "",
        description: "Header used by targets. Format hex",
    },
    {
        propName: "targetHeaderLengthIncluded",
        type: "boolean",
        defaultValue: false,
        description: "Indicates if the header is included in the packet length or not",
    },
    {
        propName: "targetTrailer",
        type: "string",
        defaultValue: "",
        description: "Trailer used by targets. Format hex",
    },
    {
        propName: "targetTrailerLengthIncluded",
        type: "boolean",
        defaultValue: false,
        description: "Indicates if the trailer is included in the packet length or not",
    },
    {
        propName: "targetCheckSumType",
        defaultValue: "none",
        description: "Checksum type applied to the messages",
    },
    {
        propName: "targetTrailerBeforeCksum",
        type: "boolean",
        defaultValue: false,
        description: "Indicates if the trailer is located before the checksum value within message",
    },
    {
        propName: "targetAck",
        type: "string",
        defaultValue: "",
        description: "ACK value send to targets. Format hex",
    },
    {
        propName: "targetNack",
        type: "string",
        defaultValue: "",
        description: "NACK value send to targets. Format hex",
    },
    {
        propName: "targetEot",
        type: "string",
        defaultValue: "",
        description: "EOT value send to targets. Format hex",
    },
    {
        propName: "targetEnq",
        type: "string",
        defaultValue: "",
        description: "ENQ value to be received from targets. Format hex",
    },
    {
        propName: "targetEscapeChar",
        type: "string",
        defaultValue: "",
        description: "Char to escape and unescape message rcv. Format hex",
    },
    {
        propName: "targetDataType",
        type: "string",
        defaultValue: "json",
        description: "Type of the data we will receive.",
    },
    {
        propName: "targetIsoConfigPath",
        type: "string",
        defaultValue: "",
        description: "CFG file to configure iso wrapper",
    },
    {
        propName: "targetCrcPoly",
        type: "integer",
        defaultValue: undefined,
        description: "Poly value to use on crc calculation",
    },
    {
        propName: "targetCrcXorIn",
        type: "integer",
        defaultValue: undefined,
        description: "XorIn value to use on crc calculation",
    },
    {
        propName: "targetCrcXorOut",
        type: "integer",
        defaultValue: undefined,
        description: "XorOut value to use on crc calculation",
    },
    {
        propName: "targetCrcReflect",
        type: "boolean",
        defaultValue: undefined,
        description: "Use reflect process on crc calculation",
    },
    {
        propName: "targetCheckSumLengthIncluded",
        type: "boolean",
        defaultValue: false,
        description: "Use reflect process on crc calculation",
    },
    {
        propName: "targetIsHeaderIncludedInCkSum",
        type: "boolean",
        defaultValue: false,
        description: "",
    },
    {
        propName: "targetIsTrailerIncludedInCkSum",
        type: "boolean",
        defaultValue: false,
        description: "",
    },
    {
        propName: "targetTcpCallerIp",
        type: "string[]",
        defaultValue: "127.0.0.1",
        description: "List of ip for targets whose connection is initiated by us, separated by -",
    },
    {
        propName: "targetTcpCallerPort",
        type: "integer[]",
        defaultValue: "2254",
        description: "List of ports for targets whose connection is initiated by us, separated by -",
    },
    {
        propName: "targetTcpCallerGroups",
        type: "string[]",
        defaultValue: undefined,
        description: "A way to group targets into pools. Each value must be separated by - . We need a value for each target caller ip",
    },
    {
        propName: "targetTcpCallerNames",
        type: "string[]",
        defaultValue: undefined,
        description: "A way to name each target. Each value must be separated by - . We need a value for each target caller ip",
    },
    {
        propName: "targetTcpCallerTimeout",
        type: "integer[]",
        defaultValue: "60000",
        description: "List of timeouts for each target whose connection is initiated by us, separated by -",
    },
    {
        propName: "targetTcpCallerReconnectTime",
        type: "integer[]",
        defaultValue: "4000",
        description: "List of reconnection time for each target whose connection is initiated by us, separated by -",
    },
    {
        propName: "targetTcpCallerHeader",
        type: "string[]",
        defaultValue: "",
        description: "List of header value for each target whose connection is initiated by us, separated by -",
    },
    {
        propName: "targetTcpCallerHeaderLengthIncluded",
        type: "boolean[]",
        defaultValue: "false",
        description: "List of flags that indicate whether the header length is included or not in message length, separated by -",
    },
    {
        propName: "targetTcpCallerTrailer",
        type: "string[]",
        defaultValue: "",
        description: "List of trailer value for each target whose connection is initiated by us, separated by -",
    },
    {
        propName: "targetTcpCallerTrailerLengthIncluded",
        type: "boolean[]",
        defaultValue: "false",
        description: "List of flags that indicate whether the trailer length is included or not in message length, separated by -",
    },
    {
        propName: "targetTcpCallerAck",
        type: "string[]",
        defaultValue: "",
        description: "List of ACK value for each target whose connection is initiated by us, separated by -",
    },
    {
        propName: "targetTcpCallerNack",
        type: "string[]",
        defaultValue: "",
        description: "List of NACK value for each target whose connection is initiated by us, separated by -",
    },
    {
        propName: "targetTcpCallerEot",
        type: "string[]",
        defaultValue: "",
        description: "List of EOT value for each target whose connection is initiated by us, separated by -",
    },
    {
        propName: "targetTcpCallerEnq",
        type: "string[]",
        defaultValue: "",
        description: "List of ENQ value for each target whose connection is initiated by us, separated by -",
    },
    {
        propName: "targetTcpCallerDataType",
        type: "string[]",
        defaultValue: "json",
        description: "List of expected data type for each target whose connection is initiated by us, separated by -",
    },
    {
        propName: "targetTcpCallerIsoConfigPath",
        type: "string[]",
        defaultValue: "",
        description: "List of file path to configure iso wrapper for each target whose connection is initiated by us, separated by -",
    },
    {
        propName: "targetTcpCallerCrcPoly",
        type: "integer[]",
        defaultValue: undefined,
        description: "List of poly value to use on crc calculation for each target whose connection is initiated by us, separated by -",
    },
    {
        propName: "targetTcpCallerCrcXorIn",
        type: "integer[]",
        defaultValue: undefined,
        description: "List of xorIn value to use on crc calculation for each target whose connection is initiated by us, separated by -",
    },
    {
        propName: "targetTcpCallerCrcXorOut",
        type: "integer[]",
        defaultValue: undefined,
        description: "List of XorOut value to use on crc calculation for each target whose connection is initiated by us, separated by -",
    },
    {
        propName: "targetTcpCallerCrcReflect",
        type: "boolean[]",
        defaultValue: undefined,
        description: "List of flags that indicate the use of reflect process on crc calculation for each target whose connection is initiated by us, separated by -",
    },
    {
        propName: "targetTcpCallerPacketLengthIncluded",
        type: "boolean[]",
        defaultValue: "false",
        description: "List of flags that indicate whether the packet length is included or not in message length, separated by -",
    },
    {
        propName: "targetTcpCallerPacketLengthType",
        type: "string[]",
        defaultValue: "uintbe",
        description: "List of length types for each target whose connection is initiated by us, separated by -",
    },
    {
        propName: "targetTcpCallerPacketLengthFormat",
        type: "string[]",
        defaultValue: "dec",
        description: "List of length formats for each target whose connection is initiated by us, separated by -",
    },
    {
        propName: "targetTcpCallerPacketLengthLen",
        type: "integer[]",
        defaultValue: "2",
        description: "List of packetLen lengths used for each target whose connection is initiated by us, separated by -",
    },
    {
        propName: "targetTcpCallerPacketLengthOffset",
        type: "integer[]",
        defaultValue: "0",
        description: "List of offset value left between header and packet length for each target whose connection is initiated by us, separated by -",
    },
    {
        propName: "targetTcpCallerPacketLengthFirst",
        type: "boolean[]",
        defaultValue: "false",
        description: "List of flags that indicate whether the packet length will be received before anythnig else for each target whose connection is initiated by us, separated by -",
    },
    {
        propName: "targetTcpCallerEnableTls",
        type: "boolean[]",
        defaultValue: "false",
        description: "List of flags that indicate whether connection with each target use TLS or not, separated by -",
    },
    {
        propName: "targetTcpCallerEscapeChar",
        type: "string[]",
        defaultValue: "",
        description: "List of escape chars used for each target whose connection is initiated by us, separated by -",
    },
    {
        propName: "targetTcpCallerCheckSumType",
        type: "string[]",
        defaultValue: "none",
        description: "List of checksum types used for each target whose connection is initiated by us, separated by -",
    },
    {
        propName: "targetTcpCallerTrailerBeforeCksum",
        type: "boolean[]",
        defaultValue: "false",
        description: "List of flags that indicate whether the trailer is set before the cksum value in msgs for each target whose connection is initiated by us, separated by -",
    },
    {
        propName: "targetTcpCallerCheckSumLengthIncluded",
        type: "boolean[]",
        defaultValue: "false",
        description: "List of flags that indicate whether the check sum is included or not in the packet length for each target whose connection is initiated by us, separated by -",
    },
    {
        propName: "targetTcpCallerIsHeaderIncludedInCkSum",
        type: "boolean[]",
        defaultValue: "false",
        description: "List of flags that indicate whether the header is included or not in cksum process for each target whose connection is initiated by us, separated by -",
    },
    {
        propName: "targetTcpCallerIsTrailerIncludedInCkSum",
        type: "boolean[]",
        defaultValue: "false",
        description: "List of flags that indicate whether the trailer is included or not in cksum process for each target whose connection is initiated by us, separated by -",
    },
    {
        propName: "targetHttpCallerRejectUnauthorized",
        type: "boolean[]",
        defaultValue: "true",
        description: "List of flags that indicate whether connection with each HTTP target must verify the server cert when use TLS, separated by -",
    },
    {
        propName: "targetHttpCallerIp",
        type: "string[]",
        defaultValue: "127.0.0.1",
        description: "List of ip for HTTP targets whose connection is initiated by us, separated by -",
    },
    {
        propName: "targetHttpCallerPort",
        type: "integer[]",
        defaultValue: "2255",
        description: "List of port for HTTP targets whose connection is initiated by us, separated by -",
    },
    {
        propName: "targetHttpCallerPath",
        type: "string[]",
        defaultValue: "",
        description: "List of path for HTTP targets whose connection is initiated by us, separated by -",
    },
    {
        propName: "targetHttpCallerGroups",
        type: "string[]",
        defaultValue: undefined,
        description: "A way to group HTTP targets into pools. Each value must be separated by - . We need a value for each target caller ip",
    },
    {
        propName: "targetHttpCallerNames",
        type: "string[]",
        defaultValue: undefined,
        description: "A way to name each HTTP targets. Each value must be separated by - . We need a value for each target caller ip",
    },
    {
        propName: "targetHttpCallerTimeout",
        type: "integer[]",
        defaultValue: "60000",
        description: "List of timeouts for each HTTP target whose connection is initiated by us, separated by -",
    },
    {
        propName: "targetHttpCallerEnableHttps",
        type: "boolean[]",
        defaultValue: "false",
        description: "List of flags that indicate whether connection with each HTTP target use TLS or not, separated by -",
    },
    {
        propName: "targetHttpCallerAuthKey",
        type: "string[]",
        defaultValue: undefined,
        description: "List of fixed auth keys (tokens) use for each HTTP target, if they require one, separated by -",
    },
    {
        propName: "targetHttpCallerAuthRuleName",
        type: "string",
        defaultValue: "TargetLogin",
        description: "Name of the rule that will be used to generate the authentication msg (login) for HTTP targets (target endpoints)",
    },
    {
        propName: "targetHttpCallerReloadAuth",
        type: "integer",
        defaultValue: 60000,
        description: "Indicate the time interval to execute the authentication process (login)",
    },
    {
        propName: "targetTimerEchoTest",
        type: "integer",
        defaultValue: 60000,
        description: "Indicate the time interval to execute the control messages process for targets",
    },
    {
        propName: "targetEchoTransformationRuleName",
        type: "string",
        defaultValue: "false",
        description: "Name of the rule that will be used to generate the echo test msgs for targets",
    },
    {
        propName: "targetLogonTransformationRuleName",
        type: "string",
        defaultValue: "false",
        description: "Name of the rule that will be used to generate the logon msgs for targets",
    },
    //Serial caller params
    {
        propName: "targetSerialCallerPort",
        type: "string[]",
        defaultValue: "COM9",
        description: "",
    },
    {
        propName: "targetSerialCallerBaudRate",
        type: "integer[]",
        defaultValue: "115200",
        description: "",
    },
    {
        propName: "targetSerialCallerDataBits",
        type: "integer[]",
        defaultValue: "8",
        description: "",
    },
    {
        propName: "targetSerialCallerStopBits",
        type: "integer[]",
        defaultValue: "1",
        description: "",
    },
    {
        propName: "targetSerialCallerParity",
        type: "string[]",
        defaultValue: "none",
        description: "",
    },
    {
        propName: "targetSerialCallerLock",
        type: "boolean[]",
        defaultValue: "false",
        description: "",
    },
    {
        propName: "targetSerialCallerXoff",
        type: "boolean[]",
        defaultValue: "false",
        description: "",
    },
    {
        propName: "targetSerialCallerXon",
        type: "boolean[]",
        defaultValue: "false",
        description: "",
    },
    {
        propName: "targetSerialCallerGroups",
        type: "string[]",
        defaultValue: undefined,
        description: "A way to group targets into pools. Each value must be separated by - . We need a value for each target caller ip",
    },
    {
        propName: "targetSerialCallerNames",
        type: "string[]",
        defaultValue: undefined,
        description: "A way to name each target. Each value must be separated by - . We need a value for each target caller ip",
    },
    {
        propName: "targetSerialCallerTimeout",
        type: "integer[]",
        defaultValue: "60000",
        description: "List of timeouts for each target whose connection is initiated by us, separated by -",
    },
    {
        propName: "targetSerialCallerReconnectTime",
        type: "integer[]",
        defaultValue: "4000",
        description: "List of reconnection time for each target whose connection is initiated by us, separated by -",
    },
    {
        propName: "targetSerialCallerHeader",
        type: "string[]",
        defaultValue: "",
        description: "List of header value for each target whose connection is initiated by us, separated by -",
    },
    {
        propName: "targetSerialCallerHeaderLengthIncluded",
        type: "boolean[]",
        defaultValue: "false",
        description: "List of flags that indicate whether the header length is included or not in message length, separated by -",
    },
    {
        propName: "targetSerialCallerTrailer",
        type: "string[]",
        defaultValue: "",
        description: "List of trailer value for each target whose connection is initiated by us, separated by -",
    },
    {
        propName: "targetSerialCallerTrailerLengthIncluded",
        type: "boolean[]",
        defaultValue: "false",
        description: "List of flags that indicate whether the trailer length is included or not in message length, separated by -",
    },
    {
        propName: "targetSerialCallerAck",
        type: "string[]",
        defaultValue: "",
        description: "List of ACK value for each target whose connection is initiated by us, separated by -",
    },
    {
        propName: "targetSerialCallerNack",
        type: "string[]",
        defaultValue: "",
        description: "List of NACK value for each target whose connection is initiated by us, separated by -",
    },
    {
        propName: "targetSerialCallerEot",
        type: "string[]",
        defaultValue: "",
        description: "List of EOT value for each target whose connection is initiated by us, separated by -",
    },
    {
        propName: "targetSerialCallerEnq",
        type: "string[]",
        defaultValue: "",
        description: "List of ENQ value for each target whose connection is initiated by us, separated by -",
    },
    {
        propName: "targetSerialCallerDataType",
        type: "string[]",
        defaultValue: "json",
        description: "List of expected data type for each target whose connection is initiated by us, separated by -",
    },
    {
        propName: "targetSerialCallerIsoConfigPath",
        type: "string[]",
        defaultValue: "",
        description: "List of file path to configure iso wrapper for each target whose connection is initiated by us, separated by -",
    },
    {
        propName: "targetSerialCallerCrcPoly",
        type: "integer[]",
        defaultValue: undefined,
        description: "List of poly value to use on crc calculation for each target whose connection is initiated by us, separated by -",
    },
    {
        propName: "targetSerialCallerCrcXorIn",
        type: "integer[]",
        defaultValue: undefined,
        description: "List of xorIn value to use on crc calculation for each target whose connection is initiated by us, separated by -",
    },
    {
        propName: "targetSerialCallerCrcXorOut",
        type: "integer[]",
        defaultValue: undefined,
        description: "List of XorOut value to use on crc calculation for each target whose connection is initiated by us, separated by -",
    },
    {
        propName: "targetSerialCallerCrcReflect",
        type: "boolean[]",
        defaultValue: undefined,
        description: "List of flags that indicate the use of reflect process on crc calculation for each target whose connection is initiated by us, separated by -",
    },
    {
        propName: "targetSerialCallerPacketLengthIncluded",
        type: "boolean[]",
        defaultValue: "false",
        description: "List of flags that indicate whether the packet length is included or not in message length, separated by -",
    },
    {
        propName: "targetSerialCallerPacketLengthType",
        type: "string[]",
        defaultValue: "uintbe",
        description: "List of length types for each target whose connection is initiated by us, separated by -",
    },
    {
        propName: "targetSerialCallerPacketLengthFormat",
        type: "string[]",
        defaultValue: "dec",
        description: "List of length formats for each target whose connection is initiated by us, separated by -",
    },
    {
        propName: "targetSerialCallerPacketLengthLen",
        type: "integer[]",
        defaultValue: "2",
        description: "List of packetLen lengths used for each target whose connection is initiated by us, separated by -",
    },
    {
        propName: "targetSerialCallerPacketLengthOffset",
        type: "integer[]",
        defaultValue: "0",
        description: "List of offset value left between header and packet length for each target whose connection is initiated by us, separated by -",
    },
    {
        propName: "targetSerialCallerPacketLengthFirst",
        type: "boolean[]",
        defaultValue: "false",
        description: "List of flags that indicate whether the packet length will be received before anythnig else for each target whose connection is initiated by us, separated by -",
    },
    {
        propName: "targetSerialCallerEscapeChar",
        type: "string[]",
        defaultValue: "",
        description: "List of escape chars used for each target whose connection is initiated by us, separated by -",
    },
    {
        propName: "targetSerialCallerCheckSumType",
        type: "string[]",
        defaultValue: "none",
        description: "List of checksum types used for each target whose connection is initiated by us, separated by -",
    },
    {
        propName: "targetSerialCallerTrailerBeforeCksum",
        type: "boolean[]",
        defaultValue: "false",
        description: "List of flags that indicate whether the trailer is set before the cksum value in msgs for each target whose connection is initiated by us, separated by -",
    },
    {
        propName: "targetSerialCallerCheckSumLengthIncluded",
        type: "boolean[]",
        defaultValue: "false",
        description: "List of flags that indicate whether the check sum is included or not in the packet length for each target whose connection is initiated by us, separated by -",
    },
    {
        propName: "targetSerialCallerIsHeaderIncludedInCkSum",
        type: "boolean[]",
        defaultValue: "false",
        description: "List of flags that indicate whether the header is included or not in cksum process for each target whose connection is initiated by us, separated by -",
    },
    {
        propName: "targetSerialCallerIsTrailerIncludedInCkSum",
        type: "boolean[]",
        defaultValue: "false",
        description: "List of flags that indicate whether the trailer is included or not in cksum process for each target whose connection is initiated by us, separated by -",
    },
];
