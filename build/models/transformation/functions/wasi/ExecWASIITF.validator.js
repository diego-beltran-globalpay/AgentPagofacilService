"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isExecWASIITF = exports.ExecWASIITFSchema = exports.ajv = void 0;
/* tslint:disable */
// generated by typescript-json-validator
const util_1 = require("util");
const Ajv = require("ajv");
exports.ajv = new Ajv({ allErrors: true, coerceTypes: false, format: "fast", nullable: true, unicode: true, uniqueItems: true, useDefaults: true });
exports.ajv.addMetaSchema(require("ajv/lib/refs/json-schema-draft-06.json"));
exports.ExecWASIITFSchema = {
    $schema: "http://json-schema.org/draft-07/schema#",
    defaultProperties: [],
    definitions: {
        "NodeJS.Dict<any>": {
            additionalProperties: {
                $ref: "#/definitions/T",
            },
            defaultProperties: [],
            type: "object",
        },
        T: {
            defaultProperties: [],
            type: "object",
        },
        WASI: {
            defaultProperties: [],
            properties: {
                wasiImport: {
                    $ref: "#/definitions/NodeJS.Dict<any>",
                    description: "Is an object that implements the WASI system call API. This object\nshould be passed as the `wasi_snapshot_preview1` import during the instantiation of a\n[`WebAssembly.Instance`][].",
                },
            },
            required: ["wasiImport"],
            type: "object",
        },
    },
    properties: {
        fieldNameSource: {
            type: "string",
        },
        param_1: {
            type: "string",
        },
        param_10: {
            type: "string",
        },
        param_2: {
            type: "string",
        },
        param_3: {
            type: "string",
        },
        param_4: {
            type: "string",
        },
        param_5: {
            type: "string",
        },
        param_6: {
            type: "string",
        },
        param_7: {
            type: "string",
        },
        param_8: {
            type: "string",
        },
        param_9: {
            type: "string",
        },
        preOpens: {
            additionalProperties: {
                type: "string",
            },
            defaultProperties: [],
            type: "object",
        },
        scriptArgs: {
            items: {},
            type: "array",
        },
        scriptFile: {
            description: "Raw data is stored in instances of the Buffer class.\nA Buffer is similar to an array of integers but corresponds to a raw memory allocation outside the V8 heap.  A Buffer cannot be resized.\nValid string encodings: 'ascii'|'utf8'|'utf16le'|'ucs2'(alias of 'utf16le')|'base64'|'binary'(deprecated)|'hex'",
            items: {
                type: "number",
            },
            type: "array",
        },
        scriptFilePath: {
            type: "string",
        },
        wasiInstance: {
            $ref: "#/definitions/WASI",
        },
    },
    type: "object",
};
exports.isExecWASIITF = exports.ajv.compile(exports.ExecWASIITFSchema);
function validate(value) {
    if (exports.isExecWASIITF(value)) {
        return value;
    }
    else {
        throw new Error(exports.ajv.errorsText(exports.isExecWASIITF.errors.filter((e) => e.keyword !== "if"), { dataVar: "ExecWASIITF" }) +
            "\n\n" +
            util_1.inspect(value));
    }
}
exports.default = validate;
