"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isReadFileByBlockITF = exports.ReadFileByBlockITFSchema = exports.ajv = void 0;
/* tslint:disable */
// generated by typescript-json-validator
const util_1 = require("util");
const Ajv = require("ajv");
exports.ajv = new Ajv({ allErrors: true, coerceTypes: false, format: "fast", nullable: true, unicode: true, uniqueItems: true, useDefaults: true });
exports.ajv.addMetaSchema(require("ajv/lib/refs/json-schema-draft-06.json"));
exports.ReadFileByBlockITFSchema = {
    $schema: "http://json-schema.org/draft-07/schema#",
    defaultProperties: [],
    properties: {
        blockIndex: {
            type: "number",
        },
        blockSize: {
            type: "number",
        },
        encoding: {
            enum: ["ascii", "base64", "binary", "hex", "latin1", "ucs-2", "ucs2", "utf-8", "utf16le", "utf8"],
            type: "string",
        },
        fieldNameDest: {
            type: "string",
        },
        file: {
            description: "Raw data is stored in instances of the Buffer class.\nA Buffer is similar to an array of integers but corresponds to a raw memory allocation outside the V8 heap.  A Buffer cannot be resized.\nValid string encodings: 'ascii'|'utf8'|'utf16le'|'ucs2'(alias of 'utf16le')|'base64'|'binary'(deprecated)|'hex'",
            items: {
                type: "number",
            },
            type: "array",
        },
        filePath: {
            type: "string",
        },
    },
    required: ["blockSize"],
    type: "object",
};
exports.isReadFileByBlockITF = exports.ajv.compile(exports.ReadFileByBlockITFSchema);
function validate(value) {
    if (exports.isReadFileByBlockITF(value)) {
        return value;
    }
    else {
        throw new Error(exports.ajv.errorsText(exports.isReadFileByBlockITF.errors.filter((e) => e.keyword !== "if"), { dataVar: "ReadFileByBlockITF" }) +
            "\n\n" +
            util_1.inspect(value));
    }
}
exports.default = validate;
